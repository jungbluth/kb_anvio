# -*- coding: utf-8 -*-
#BEGIN_HEADER
import os
import json

from kb_anvio.Utils.AnvioUtil import AnvioUtil

#END_HEADER


class kb_anvio:
    '''
    Module Name:
    kb_anvio

    Module Description:
    A KBase module: kb_anvio
    '''

    ######## WARNING FOR GEVENT USERS ####### noqa
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    ######################################### noqa
    VERSION = "1.0.0"
    GIT_URL = "https://github.com/jungbluth/kb_anvio"
    GIT_COMMIT_HASH = ""

    #BEGIN_CLASS_HEADER
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR
        self.config = config
        self.config['SDK_CALLBACK_URL'] = os.environ['SDK_CALLBACK_URL']
        self.config['KB_AUTH_TOKEN'] = os.environ['KB_AUTH_TOKEN']
        #END_CONSTRUCTOR
        pass

    def run_kb_anvio(self, ctx, params):
        """
        :param params: instance of type "AnvioInputParams"
            required params: assembly_ref: Genome assembly object reference
                workspace_name: the name of the workspace it gets saved to
                reads_list: list of reads object
                (PairedEndLibrary/SingleEndLibrary) upon which Anvio will be run
            optional params: 
                thread: number of threads; default 1
                read mapping tool: tool to use for read mapping
                min_contig_length: minimum contig length; default 2500
                contig_split_size: artifical contig splitting size for Anvio
                kmer_size: minimum contig length; default 2500

        :returns: instance of type "AnvioResult" (result_folder: folder
            path that holds all files generated by run_kb_anvio report_name:
            "result_directory" of String, parameter "report_name"
            of String, parameter "report_ref" of String
        """
        # ctx is the context object
        # return variables are: returnVal
        #BEGIN run_kb_anvio

        print('--->\nRunning kb_anvio.kb_anvio\nparams:')
        print(json.dumps(params, indent=1))

        for key, value in params.items():
            if isinstance(value, str):
                params[key] = value.strip()

        anvio_runner = AnvioUtil(self.config)

        returnVal = anvio_runner.run_anvio(ctx, params)
        #END run_kb_anvio

        # At some point might do deeper type checking...
        if not isinstance(returnVal, dict):
            raise ValueError('Method run_kb_anvio return value ' +
                             'returnVal is not type dict as required.')
        # return the results
        return [returnVal]

    def status(self, ctx):
        #BEGIN_STATUS
        returnVal = {'state': "OK",
                     'message': "",
                     'version': self.VERSION,
                     'git_url': self.GIT_URL,
                     'git_commit_hash': self.GIT_COMMIT_HASH}
        #END_STATUS
        return [returnVal]
